{"name":"LiterallyCSS","tagline":"are you lazy at styling? why just don't call it, `literally` instead.","body":"# literallycss\r\nA collection of css helpers class for anyone does not (or too lazy) like to create a lot of repeating a same css property and values. Just include the a css helper in a class name and it will implement styling as a css rules does, literally. \r\n    \r\n# Why I make this\r\n**tl;dr** I'm lazy at creating a lot of css rules. So I created this. :trollface:  \r\n\r\n#How to use\r\nJust include the a css helper in a class name and it will implement styling as a css rules does, literally.  \r\nFor example, you want a image full width of the container (suppose the `<img>` is inside the `<div>`) you can do like this\r\n    \r\n      \r\n    <img class=\"width-fitcontent\" src\"...\" alt=\"...\" /> \r\n\r\n  Will make this `<img>` extend to fit the wrapper\r\n\r\nYou might use it with jQuery `.addClass()` with some event or callback \r\nFor Example:\r\n\r\n     \r\n     $(\"#someid\").addClass(\"display-nothing\");\r\n\r\n\r\n\r\nCompartible with Bootstrap latest version.\r\n    \r\nFor a naming of all css classes, syntax and format was pretty much inspired by Harry Roberts' http://cssguidelin.es/.\r\n\r\nCredits to these following awesome guides:  \r\n[cssguidelin.es](http://cssguidelin.es/)  \r\n[webcreatorbox](http://www.webcreatorbox.com/en/)  \r\n[css-tricks](https://css-tricks.com/)\r\n\r\n# Some possible issue\r\n* I haven't test with the non-latin language (Like Chinese Mandarin, Japanese Katakana/Hiragana/Kanji).\r\n\r\n\r\n---\r\n\r\n# STYLESHEET GUIDES\r\n\r\nThere are nine section of css helpers:\r\n * GENERAL FONTS SETTINGS -         Offers a rules for setting a font based on OS of client.\r\n                                    Or use Open Sans.\r\n * BACKGROUNDS  -                   Generic Background helpers\r\n * IMAGE UTILITIES -                Image utilities class\r\n * MARGIN-PADDING UTILS -           presets of margin,padding utilities class\r\n                                    locked at 15px\r\n * BORDER -                         All border setting\r\n * POSITIONING & WIDTH-HEIGHT -     Positioning, Width and height helpers\r\n * TEXT ALIGNMENT & MANIPULATION -  Text alignment: left, right, center, justify, inherit;\r\n                                    also manipulation like no selection\r\n * DISPLAY HELPERS -                Including display type, visibility, and overflow\r\n * HTML ELEMENTS -                  html, body, header, footer, section etc.\r\n\r\n--- \r\n## GENERAL FONTS SETTINGS  \r\nOffers a rules for setting a font based on OS of client. Or use Open Sans.  \r\n\r\n* `.font-os-sans-serif`  \r\nSet selected text element to show the font based on client OS.  \r\nFor instance, if user using Windows 7 or newer, Segoe UI will be rendered. For OS X or iOS, Helvetica Neue will be rendered  \r\n\r\n* `.font-opensan`  \r\nSet selected text element to use Open Sans.  \r\n\r\n* `.font-style-normal`  \r\nSet selected text element font style to be normal.  \r\n\r\n* `.font-variant-normal`  \r\nSet selected text element font variant to be normal.  \r\n\r\n* `.font-variant-small-caps`  \r\nSet selected text element font variant to be rendered as a small capital. First Character will be full width.  \r\n\r\n* `.font-variant-initial`  \r\nSet selected text element font variant to be normal.  \r\n\r\n\r\n## BACKGROUNDS \r\nGenerally, you might add these following class to the wrapper (supposely `<div>` or `<article>` or `<sections>`) of the text elements inside. Actually the following classes will set exactly what you will see here.  \r\n\r\n`.bg-white`  \r\nWhite colored with black text\r\n\r\n`.bg-black`  \r\nBlack colored background with white text\r\n\r\n`.bg-grey`  \r\nBackground grey with white text  \r\n\r\n`.bg-bashgreenblack`  \r\nAdd vintage, unix terminal style background and text\r\n\r\n\r\n## IMAGE UTILITIES\r\nSet of image utilities classes, including making background image responsive and image filtering  \r\n\r\n`.image-bg-responsive`  \r\nSet the selected image to be rendered responsive. However you need to define the image source using with positioning like `background: url(...Your image url...) top center`  \r\n\r\n`.image-filter-opacity-half`  \r\nSet image filtering to render with half inage opacity\r\n\r\n`.image-filter-opacity-none`  \r\nSet image filtering to render with no opacity at all\r\n\r\n`.image-filter-grayscale`  \r\nSet image filtering grayscale\r\n\r\n`.image-filter-sepia`  \r\nSet image filtering sepia\r\n\r\n# Documenting in progress\r\n","google":"UA-61221399-3","note":"Don't delete this file! It's used internally to help with page regeneration."}